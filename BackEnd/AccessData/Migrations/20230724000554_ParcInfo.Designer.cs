// <auto-generated />
using System;
using AccessData.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AccessData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230724000554_ParcInfo")]
    partial class ParcInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccessData.Models.Bureau", b =>
                {
                    b.Property<int>("Bureau_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Bureau_ID"));

                    b.Property<string>("Batiment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fonctionnaire_ID")
                        .HasColumnType("int");

                    b.Property<int?>("FonctionnairesFonctionnaire_ID")
                        .HasColumnType("int");

                    b.Property<int>("Numéro_Bureau")
                        .HasColumnType("int");

                    b.HasKey("Bureau_ID");

                    b.HasIndex("FonctionnairesFonctionnaire_ID");

                    b.ToTable("Bureau");
                });

            modelBuilder.Entity("AccessData.Models.Caractéristique", b =>
                {
                    b.Property<int>("ID_Caracteristique")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Caracteristique"));

                    b.Property<string>("CPU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Disque_dur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Memoire_RAM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vitesse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Caracteristique");

                    b.ToTable("Caractéristique");
                });

            modelBuilder.Entity("AccessData.Models.Division", b =>
                {
                    b.Property<int>("Division_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Division_ID"));

                    b.Property<string>("Nom_Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SousDirection_ID")
                        .HasColumnType("int");

                    b.Property<int?>("SousDirectionsSousDirection_ID")
                        .HasColumnType("int");

                    b.HasKey("Division_ID");

                    b.HasIndex("SousDirectionsSousDirection_ID");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("AccessData.Models.Equipement", b =>
                {
                    b.Property<int>("Equipement_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Equipement_ID"));

                    b.Property<string>("Archivee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaractéristiquesID_Caracteristique")
                        .HasColumnType("int");

                    b.Property<int>("ID_Caracteristique")
                        .HasColumnType("int");

                    b.Property<int>("ID_Type")
                        .HasColumnType("int");

                    b.Property<int?>("MarchésNum_Marche")
                        .HasColumnType("int");

                    b.Property<int>("Num_Marche")
                        .HasColumnType("int");

                    b.Property<string>("Num_Serie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeEquipementsID_Type")
                        .HasColumnType("int");

                    b.HasKey("Equipement_ID");

                    b.HasIndex("CaractéristiquesID_Caracteristique");

                    b.HasIndex("MarchésNum_Marche");

                    b.HasIndex("TypeEquipementsID_Type");

                    b.ToTable("Equipement");
                });

            modelBuilder.Entity("AccessData.Models.Equipement_Bureau", b =>
                {
                    b.Property<int>("Equipement_ID")
                        .HasColumnType("int");

                    b.Property<int>("Bureau_ID")
                        .HasColumnType("int");

                    b.HasKey("Equipement_ID", "Bureau_ID");

                    b.HasIndex("Bureau_ID");

                    b.ToTable("Equipement_Bureau");
                });

            modelBuilder.Entity("AccessData.Models.Equipement_Fonctionnaire", b =>
                {
                    b.Property<int>("Equipement_ID")
                        .HasColumnType("int");

                    b.Property<int>("Fonctionnaire_ID")
                        .HasColumnType("int");

                    b.HasKey("Equipement_ID", "Fonctionnaire_ID");

                    b.HasIndex("Fonctionnaire_ID");

                    b.ToTable("Equipement_Fonctionnaire");
                });

            modelBuilder.Entity("AccessData.Models.Fonctionnaire", b =>
                {
                    b.Property<int>("Fonctionnaire_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Fonctionnaire_ID"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Service_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ServicesService_ID")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Fonctionnaire_ID");

                    b.HasIndex("ServicesService_ID");

                    b.ToTable("Fonctionnaire");
                });

            modelBuilder.Entity("AccessData.Models.Marché", b =>
                {
                    b.Property<int>("Num_Marche")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Num_Marche"));

                    b.Property<string>("Fournisseur")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_marche")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_reception")
                        .HasColumnType("datetime2");

                    b.HasKey("Num_Marche");

                    b.ToTable("Marché");
                });

            modelBuilder.Entity("AccessData.Models.Requete", b =>
                {
                    b.Property<int>("Num_Identification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Num_Identification"));

                    b.Property<int>("Administrateur_ID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Etat_Requete")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fonctionnaire_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Fonctionnaire_ID1")
                        .HasColumnType("int");

                    b.Property<int>("Technicien_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_cloture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("date_prise_en_charge")
                        .HasColumnType("datetime2");

                    b.HasKey("Num_Identification");

                    b.HasIndex("Administrateur_ID");

                    b.HasIndex("Fonctionnaire_ID");

                    b.HasIndex("Fonctionnaire_ID1");

                    b.HasIndex("Technicien_ID");

                    b.ToTable("Requete");
                });

            modelBuilder.Entity("AccessData.Models.Service", b =>
                {
                    b.Property<int>("Service_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Service_ID"));

                    b.Property<int>("Division_ID")
                        .HasColumnType("int");

                    b.Property<int?>("DivisionsDivision_ID")
                        .HasColumnType("int");

                    b.Property<string>("Nom_Service")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Service_ID");

                    b.HasIndex("DivisionsDivision_ID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("AccessData.Models.SousDirection", b =>
                {
                    b.Property<int>("SousDirection_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SousDirection_ID"));

                    b.Property<string>("Nom_SousDirection")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SousDirection_ID");

                    b.ToTable("SousDirection");
                });

            modelBuilder.Entity("AccessData.Models.TypeEquipement", b =>
                {
                    b.Property<int>("ID_Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID_Type"));

                    b.Property<string>("nom_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Type");

                    b.ToTable("TypeEquipement");
                });

            modelBuilder.Entity("AccessData.Models.Bureau", b =>
                {
                    b.HasOne("AccessData.Models.Fonctionnaire", "Fonctionnaires")
                        .WithMany("Bureaux")
                        .HasForeignKey("FonctionnairesFonctionnaire_ID");

                    b.Navigation("Fonctionnaires");
                });

            modelBuilder.Entity("AccessData.Models.Division", b =>
                {
                    b.HasOne("AccessData.Models.SousDirection", "SousDirections")
                        .WithMany("Divisions")
                        .HasForeignKey("SousDirectionsSousDirection_ID");

                    b.Navigation("SousDirections");
                });

            modelBuilder.Entity("AccessData.Models.Equipement", b =>
                {
                    b.HasOne("AccessData.Models.Caractéristique", "Caractéristiques")
                        .WithMany("Equipements")
                        .HasForeignKey("CaractéristiquesID_Caracteristique");

                    b.HasOne("AccessData.Models.Marché", "Marchés")
                        .WithMany("Equipements")
                        .HasForeignKey("MarchésNum_Marche");

                    b.HasOne("AccessData.Models.TypeEquipement", "TypeEquipements")
                        .WithMany("Equipements")
                        .HasForeignKey("TypeEquipementsID_Type");

                    b.Navigation("Caractéristiques");

                    b.Navigation("Marchés");

                    b.Navigation("TypeEquipements");
                });

            modelBuilder.Entity("AccessData.Models.Equipement_Bureau", b =>
                {
                    b.HasOne("AccessData.Models.Bureau", "Bureaux")
                        .WithMany("EquipementBureau")
                        .HasForeignKey("Bureau_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessData.Models.Equipement", "Equipements")
                        .WithMany("EquipementBureau")
                        .HasForeignKey("Equipement_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bureaux");

                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("AccessData.Models.Equipement_Fonctionnaire", b =>
                {
                    b.HasOne("AccessData.Models.Equipement", "Equipements")
                        .WithMany("EquipementFonctionnaire")
                        .HasForeignKey("Equipement_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessData.Models.Fonctionnaire", "Fonctionnaires")
                        .WithMany("Equipement_Fonctionnaire")
                        .HasForeignKey("Fonctionnaire_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipements");

                    b.Navigation("Fonctionnaires");
                });

            modelBuilder.Entity("AccessData.Models.Fonctionnaire", b =>
                {
                    b.HasOne("AccessData.Models.Service", "Services")
                        .WithMany("Fonctionnaires")
                        .HasForeignKey("ServicesService_ID");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("AccessData.Models.Requete", b =>
                {
                    b.HasOne("AccessData.Models.Fonctionnaire", "Fonctionnaire_admin")
                        .WithMany()
                        .HasForeignKey("Administrateur_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccessData.Models.Fonctionnaire", "Fonctionnaire_fonc")
                        .WithMany()
                        .HasForeignKey("Fonctionnaire_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccessData.Models.Fonctionnaire", null)
                        .WithMany("Requetes")
                        .HasForeignKey("Fonctionnaire_ID1");

                    b.HasOne("AccessData.Models.Fonctionnaire", "Fonctionnaire_tech")
                        .WithMany()
                        .HasForeignKey("Technicien_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fonctionnaire_admin");

                    b.Navigation("Fonctionnaire_fonc");

                    b.Navigation("Fonctionnaire_tech");
                });

            modelBuilder.Entity("AccessData.Models.Service", b =>
                {
                    b.HasOne("AccessData.Models.Division", "Divisions")
                        .WithMany("Services")
                        .HasForeignKey("DivisionsDivision_ID");

                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("AccessData.Models.Bureau", b =>
                {
                    b.Navigation("EquipementBureau");
                });

            modelBuilder.Entity("AccessData.Models.Caractéristique", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("AccessData.Models.Division", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("AccessData.Models.Equipement", b =>
                {
                    b.Navigation("EquipementBureau");

                    b.Navigation("EquipementFonctionnaire");
                });

            modelBuilder.Entity("AccessData.Models.Fonctionnaire", b =>
                {
                    b.Navigation("Bureaux");

                    b.Navigation("Equipement_Fonctionnaire");

                    b.Navigation("Requetes");
                });

            modelBuilder.Entity("AccessData.Models.Marché", b =>
                {
                    b.Navigation("Equipements");
                });

            modelBuilder.Entity("AccessData.Models.Service", b =>
                {
                    b.Navigation("Fonctionnaires");
                });

            modelBuilder.Entity("AccessData.Models.SousDirection", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("AccessData.Models.TypeEquipement", b =>
                {
                    b.Navigation("Equipements");
                });
#pragma warning restore 612, 618
        }
    }
}
